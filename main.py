import telebot
from telebot import types
import time
from datetime import datetime, timedelta
import threading

bot = telebot.TeleBot('5960080231:AAGFQk8RQcQ2X-w6qIFHv8245RFCn-GhB4w') # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º

users_access = {} # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –û–ö –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —Å–µ–∫—É–Ω–¥
def tg_check (x):
    while True:
        for user_id in users_access:
            time_wait = users_access[user_id]["wait_ok"] # –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
            if users_access[user_id]["wait_ok"] != False:
                if time_wait < datetime.now():
                    users_access[user_id]["wait_ok"] = False
                    start(user_id)
threading.Thread(target=tg_check, args=([(1, 2)])).start() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –û–ö (–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã)

# –¢–∏–ø—ã –≥—Ä—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
list_soils = ["–ü–µ—Å–æ–∫ –ø–ª–æ—Ç–Ω—ã–π", "–ü–µ—Å–æ–∫ —Ä—ã—Ö–ª—ã–π", "–°—É–ø–µ—Å—å", "–ì–ª–∏–Ω–∞ —Ç–≤–µ—Ä–¥–∞—è", "–ì–ª–∏–Ω–∞ –º—è–≥–∫–æ–ø–ª–∞—Å—Ç–∏—á–Ω–∞—è", "–ì–ª–∏–Ω–∞ —é—Ä—Å–∫–∞—è",
                  "–°—É–≥–ª–∏–Ω–æ–∫", "–ù–∞—Å—ã–ø–Ω–æ–π –≥—Ä—É–Ω—Ç", "–ú–µ—Ä–≥–µ–ª—å"]

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=["start"])
def start(message):
    if str(message).isdigit():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—é–¥–∞ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –º–µ–Ω—é
        user_id = message
    else:
        user_id = message.chat.id # –ò–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Å–∏–ª–∏–µ –≤–¥–∞–≤–ª–∏–≤–∞–Ω–∏—è üí™")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users_access.update({user_id: {"piles":False,
                                   "type_rein": False,
                                   "L":False,
                                   "wait_ok":False,
                                   "soil": False,
                                   "H":False,
                                   "E1":False,
                                   "E2":False}})

    # –í—ã–≤–æ–¥–∏–º –ø–µ—á–µ—Ä–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–≤–∞–∏
    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton('300', callback_data='piles_300'))
    key.add(types.InlineKeyboardButton('350', callback_data='piles_350'))
    key.add(types.InlineKeyboardButton('400', callback_data='piles_400'))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏ S, –≤ –º–º: ", reply_markup=key)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª–∏–Ω—ã —Å–≤–∞–∏
def check_piles(user_id, piles, length):
    if piles == 300 and length <= 12:
        type_soil(user_id)
    elif piles == 350 and length <= 14:
        type_soil(user_id)
    elif piles == 400 and length <= 16:
        type_soil(user_id)
    else:
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–≤–∞–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤ —Ç—Ä–µ–±—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        key = types.InlineKeyboardMarkup()
        key.add(types.InlineKeyboardButton('–î–∞', callback_data='yes_check'))
        key.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no_check'))
        bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, —Å–≤–∞—è —Å–æ—Å—Ç–∞–≤–Ω–∞—è? ", reply_markup=key)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–ª—É–±–∏–Ω—ã –∫—Ä–æ–≤–ª–∏
def check_roof(user_id, length, roof):
    if length < roof: # –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω–∞ –∫—Ä–æ–≤–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤ —Ç—Ä–µ–±—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        key = types.InlineKeyboardMarkup()
        key.add(types.InlineKeyboardButton('–î–ª–∏–Ω—É —Å–≤–∞–∏', callback_data='change_pile'))
        key.add(types.InlineKeyboardButton('–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π —Å–ª–æ–π –≥—Ä—É–Ω—Ç–∞', callback_data='other_soil'))
        bot.send_message(user_id, "–û—Å—Ç—Ä–∏–µ —Å–≤–∞–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∫—Ä–æ–≤–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–Ω—Ç–∞. –ß—Ç–æ –∏–∑–º–µ–Ω–∏–º?", reply_markup=key)
    else:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞, –≤ –ú–ü–∞:")

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
def type_rein(user_id, name_call):
    users_access[user_id]["type_rein"] = int(name_call[9:])  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_access[user_id]["L"] = False
    users_access[user_id]["H"] = False
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É —Å–≤–∞–∏, –≤ –º:")

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤–∞–∏
def piles(user_id, name_call):
    users_access[user_id]["L"] = False
    users_access[user_id]["H"] = False
    piles_type = int(name_call[6:]) # –°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users_access[user_id]["piles"] = int(name_call[6:])  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    key = types.InlineKeyboardMarkup()
    for i in range(6, 14):
        if (piles_type == 350 or piles_type == 400) and i == 9:
            continue
        key.add(types.InlineKeyboardButton(f'{i}', callback_data=f'type_rein{i}'))
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=key)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ —Å–≤–∞—è —Å–æ—Å—Ç–∞–≤–Ω–∞—è
def yes_check(user_id):
    piles = users_access[user_id]["piles"] # –°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    piles_length = users_access[user_id]["L"]  # –°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–º

    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton('–î–∞', callback_data='yes'))
    key.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no'))
    bot.send_message(user_id, f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                              f"–°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏ = {piles} –º\n"
                              f"–î–ª–∏–Ω–∞ —Å–≤–∞–∏ = {piles_length} –º\n\n"
                              f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=key)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ —Å–≤–∞—è –Ω–µ —Å–æ—Å—Ç–∞–≤–Ω–∞—è
def no_check(user_id):
    piles = users_access[user_id]["piles"] # –°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if piles == 300:
        piles_length = 12  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–≤–∞–∏
    elif piles == 350:
        piles_length = 14  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–≤–∞–∏
    elif piles == 400:
        piles_length = 16  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–≤–∞–∏

    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton('–æ–∫', callback_data='ok'))
    bot.send_message(user_id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–≤–∞–∏ —Å–µ—á–µ–Ω–∏–µ–º {piles} –º–º –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {piles_length} –º", reply_markup=key)

    # –ó–∞—Å–µ–∫–∞–µ–º –¥–≤–µ —Å–µ–∫—É–Ω–¥—ã
    users_access[user_id]["wait_ok"] = datetime.now() + timedelta(seconds=2) # –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞

# –ï—Å–ª–∏ —Å–µ—á–µ–Ω–∏–µ –∏ –¥–ª–∏–Ω–∞ —Å–≤–∞–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
def type_soil(user_id):
    users_access[user_id]["H"] = False
    users_access[user_id]["E1"] = False

    key = types.InlineKeyboardMarkup()
    for i in range(len(list_soils)):
        key.add(types.InlineKeyboardButton(f'{list_soils[i]}', callback_data=f'soil{i}'))
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–Ω—Ç–∞:", reply_markup=key)

# –í—ã–±—Ä–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–Ω—Ç
def bad_soil(user_id, soil):
    if soil == "soil4":
        soil = "–≥–ª–∏–Ω–∞ –º—è–≥–∫–æ–ø–ª–∞—Å—Ç–∏—á–Ω–∞—è"
    else:
        soil = "–Ω–∞—Å—ã–ø–Ω–æ–π –≥—Ä—É–Ω—Ç"
    bot.send_message(user_id, f"–ü–æ –°–ü {soil} –Ω–µ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å–≤–∞–π–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞")
    type_soil(user_id)

# –í—ã–±—Ä–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–Ω—Ç
def good_soil(user_id, number_soil):
    users_access[user_id]["soil"] = list_soils[number_soil]
    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –∫—Ä–æ–≤–ª—è —Å–∞–º–æ–≥–æ —Ç–≤–µ—Ä–¥–æ–≥–æ –≥—Ä—É–Ω—Ç–∞, "
                              f"–≤ –º–µ—Ç—Ä–∞—Ö –æ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–µ–º–ª–∏:")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞
def force_under_probe(user_id, force):
    if force > 50:
        bot.send_message(user_id, f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ü–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π "
                                  f"—Ç–∏–ø –≥—Ä—É–Ω—Ç–∞")
        type_soil(user_id)
    else:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —É—Å–∏–ª–∏–µ –ø–æ –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–æ–Ω–¥–∞, –≤ –ö–ü–∞:")


# –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ä–∞—Å—á–µ—Ç–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–æ–ø—É—Å–∫–∞–µ–º—É—é –Ω–∞ —Å–≤–∞—é –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
def check_rein(type_reinf, S, ES):
    # –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    all_info = {6: {300: [91.70, 119.93, 144.64, 169.35, 194.06, 218.77, 239.95],
                    350: [119.74, 158.17, 191.80, 225.44, 259.07, 292.70, 321.52],
                    400: [152.09, 202.30, 246.22, 290.15, 334.07, 378.00, 415.65]},
                78: {300: [96.77, 125.01, 149.72, 174.43, 199.14, 223.85, 245.02],
                     350: [124.81, 163.25, 196.88, 230.51, 230.51, 297.77, 326.60],
                     400: [157.17, 207.37, 251.30, 295.23, 339.15, 383.08, 420.73]},
                9: {300: [None, None, 155.55, 180.26, None, None, None]},
                10: {300: [109.19, 137.43, 162.13, 186.84, 211.55, 236.26, 257.44],
                     350: [137.23, 175.66, 209.30, 242.90, 276.56, 310.19, 339.02],
                     400: [169.59, 219.79, 263.71, 307.64, 351.57, 395.49, 433.14]},
                11: {300: [116.64, 144.87, 169.58, 194.29, 219.00, 243.71, 264.89],
                     350: [144.68, 183.11, 216.74, 250.34, 284.01, 317.64, 346.46],
                     400: [177.03, 227.24, 271.16, 315.09, 359.01, 412.41, 440.59]},
                12: {300: [124.83, 153.07, 177.78, 202.48, 227.19, 251.90, 273.08],
                     350: [152.87, 191.31, 224.94, 258.57, 292.20, 325.83, 354.66],
                     400: [185.23, 235.43, 279.35, 323.28, 367.21, 411.13, 448.78]},
                13: {300: [138.61, 166.85, 191.55, 216.26, 240.97, 265.68, 286.86],
                     350: [166.65, 205.09, 238.72, 272.35, 305.98, 339.61, 368.44],
                     400: [199.01, 249.21, 293.13, 337.06, 380.99, 424.91, 462.56]}}
    # –ü–µ—Ä–µ—á–µ–Ω—å –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
    load_type = ["B15", "B20", "B25", "B30", "B35", "B40", "B45"]

    # —Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏ –Ω–∞–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–≤–∞ —Ç–∏–ø–∞ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–∏–Ω
    if type_reinf == 7 or type_reinf == 8:
        type_reinf = 78
    need_arr = all_info[type_reinf][S]

    #–£–∑–Ω–∞–µ–º –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç
    answer_id = None
    for i in range(len(need_arr)):
        if need_arr[i] != None and ES <= need_arr[i]:
            answer_id = i
            break

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–∞—Ä–∫–æ–π –±–µ—Ç–æ–Ω–∞
    if answer_id == None:
        return "..."
    else:
        return load_type[answer_id]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞
def effort(user_id):
    S = users_access[user_id]["piles"] # –°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏ (–º–º)
    type_reinf = users_access[user_id]["type_rein"] # –¢–∏–ø –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (‚Ññ)
    L = users_access[user_id]["L"] # –î–ª–∏–Ω–∞ —Å–≤–∞–∏ (–º)
    T = users_access[user_id]["soil"] # –¢–∏–ø –≥—Ä—É–Ω—Ç–∞ (—Ñ—Ä–∞–∑–∞)
    H = users_access[user_id]["H"] # –ì–ª—É–±–∏–Ω–∞ –∫—Ä–æ–≤–ª–∏  (–º)
    E1 = users_access[user_id]["E1"] # –£—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞  (–ú–ü–∞)
    E2 = users_access[user_id]["E2"]  # –£—Å–∏–ª–∏–µ –ø–æ –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–æ–Ω–¥–∞ (–ö–ü–∞)

    # –†–∞—Å—á–µ—Ç —É—Å–∏–ª–∏—è
    ES = int(((S * S * 0.01 * E1 * 10.19711621) / 1000 + (H * 100 * 0.01 * S * 4 * E2 * 0.010197162) / 1000))
    grade = check_rein(type_reinf, S, ES) # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ä–∞—Å—á–µ—Ç–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–æ–ø—É—Å–∫–∞–µ–º—É—é –Ω–∞ —Å–≤–∞—é –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É

    bot.send_message(user_id, f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                              f"–°–µ—á–µ–Ω–∏–µ —Å–≤–∞–∏: {S} –º–º\n"
                              f"–¢–∏–ø –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {type_reinf}\n"
                              f"–î–ª–∏–Ω–∞ —Å–≤–∞–∏: {L} –º\n"
                              f"–¢–∏–ø –≥—Ä—É–Ω—Ç–∞: {T}\n"
                              f"–ì–ª—É–±–∏–Ω–∞ –∫—Ä–æ–≤–ª–∏: {H} –º\n"
                              f"–£—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞: {E1} –ú–ü–∞\n"
                              f"–£—Å–∏–ª–∏–µ –ø–æ –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–æ–Ω–¥–∞: {E2} –ö–ü–∞\n")

    bot.send_message(user_id, f'–î–ª—è –ø—Ä–æ—Ä–µ–∑–∞–Ω–∏—è –≥—Ä—É–Ω—Ç–∞ "{T.lower()}" —Å –º–æ–¥—É–ª–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ä–∞–≤–Ω—ã–º {E1}, '
                              f'—Å–≤–∞–µ–π —Å–µ—á–µ–Ω–∏–µ–º {S} –º–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å–∏–ª–∏–µ {int(ES)} —Ç–æ–Ω–Ω. '
                              f'–ü—Ä–∏ —ç—Ç–æ–º —Å–≤–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –±–µ—Ç–æ–Ω–∞ {grade} –∏ –≤—ã—à–µ')
    if ES >= 250:
        img = open("table.png", 'rb')
        bot.send_photo(user_id, img, caption="–£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ —Å–≤–∞—è –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è", parse_mode="html")

    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton('–î–∞', callback_data='yes_end'))
    key.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no_end'))
    bot.send_message(user_id, "–ü–æ—Å—á–∏—Ç–∞–µ–º –¥—Ä—É–≥–æ–π —Å–ª–æ–π?", reply_markup=key)

# –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
@bot.callback_query_handler(func=lambda call: call.data)
def answer(call):
    user_id = call.from_user.id # –ò–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name_call = call.data # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if "piles" in call.data: # –ù–∞–∂–∞–ª –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å —Å –ª—é–±—ã–º —Å–µ—á–µ–Ω–∏–µ–º —Å–≤–∞–∏
        piles(user_id, name_call)
    elif "type_rein" in call.data: # –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        type_rein(user_id, name_call)
    elif "yes_check" == call.data: # –û—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ —Å–≤–∞—è —Å–æ—Å—Ç–∞–≤–Ω–∞—è
        yes_check(user_id)
    elif "no_check" == call.data: # –û—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ —Å–≤–∞—è –Ω–µ —Å–æ—Å—Ç–∞–≤–Ω–∞—è
        no_check(user_id)
    elif "yes" == call.data: # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—á–µ–Ω–∏—é –∏ –¥–ª–∏–Ω–µ —Å–≤–∞–∏
        type_soil(user_id)
    elif "no" == call.data or "ok" == call.data: # –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—á–µ–Ω–∏—é –∏ –¥–ª–∏–Ω–µ —Å–≤–∞–∏ –∏–ª–∏ —Å–≤–∞—è –Ω–µ —Å–æ—Å—Ç–∞–≤–Ω–∞—è
        start(user_id)
    elif "change_pile" == call.data: # –†–µ—à–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É —Å–≤–∞–∏
        type_rein(user_id, f"type_rein{users_access[user_id]['type_rein']}")
    elif "other_soil" == call.data: # –†–µ—à–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–π –≥—Ä—É–Ω—Ç–∞
        type_soil(user_id)
    elif "yes_end" == call.data: # –í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–∞–ª –¥–∞
        start(user_id)
    elif "no_end" == call.data: # –í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–∞–ª –Ω–µ—Ç
        bot.send_message(user_id, "–î–æ—Å–≤–∏–¥–∞–Ω–∏—è!")
    elif "soil4" == call.data or "soil7" == call.data: # –í—ã–±—Ä–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–Ω—Ç
        bad_soil(user_id, call.data)
    elif "soil" in call.data: # –í—ã–±—Ä–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–Ω—Ç
        good_soil(user_id, int(call.data[4:]))

# –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def text(message):
    user_id = message.from_user.id # –ò–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = message.text # –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in users_access: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–∞–∂–∏–º–∞–ª –∫–Ω–æ–ø–∫—É Start
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–ª–∏–Ω—É –¥–ª–∏–Ω—É —Å–≤–∞–∏
        if users_access[user_id]["piles"] != False and users_access[user_id]["L"] == False:
            if text.isdigit(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                users_access[user_id]["L"] = int(text)
                check_piles(user_id, users_access[user_id]["piles"], int(text)) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω—É—é –¥–ª–∏–Ω—É —Å–≤–∞–∏
            else:
                bot.send_message(user_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–ª—É–±–∏–Ω—É –∫—Ä–æ–≤–ª–∏
        elif users_access[user_id]["piles"] != False and users_access[user_id]["L"] != False and users_access[user_id]["H"] == False:
            text_check = text.replace(".", "")
            if text_check.isdigit(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                users_access[user_id]["H"] = float(text)
                check_roof(user_id, users_access[user_id]["L"], users_access[user_id]["H"]) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –∫—Ä–æ–≤–ª–∏
            else:
                bot.send_message(user_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞
        elif users_access[user_id]["piles"] != False and users_access[user_id]["L"] != False and \
                users_access[user_id]["H"] != False and users_access[user_id]["E1"] == False:
            if text.isdigit(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                users_access[user_id]["E1"] = int(text)
                force_under_probe(user_id, users_access[user_id]["E1"])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —É—Å–∏–ª–∏–µ –ø–æ–¥ –æ—Å—Ç—Ä–∏–µ–º –∑–æ–Ω–¥–∞
            else:
                bot.send_message(user_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —É—Å–∏–ª–∏–µ –ø–æ –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–æ–Ω–¥–∞
        elif users_access[user_id]["piles"] != False and users_access[user_id]["L"] != False and users_access[user_id]["H"] != False \
                and users_access[user_id]["E1"] != False and users_access[user_id]["E2"] == False:
            if text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                users_access[user_id]["E2"] = int(text)
                effort(user_id)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–∏–ª–∏–µ (–≥–ª–∞–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
            else:
                bot.send_message(user_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

# –ö–æ–¥ –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(1)